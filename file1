Chapter 1 
■
 GettinG Started 
2
One of the more popular VCS tools was a system called RCS, which is still distributed with many computers 
today. Even the popular Mac OS X operating system includes the 
rcs
 command when you install the Developer Tools. 
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then  
re-create what any file looked like at any point in time by adding up all the patches.
Figure 1-1.
Local version control
Chapter 1 
■
 GettinG Started 
3
Centralized Version Control Systems
The next major issue that people encounter is that they need to collaborate with developers on other systems. To 
deal with this problem, Centralized Version Control Systems (CVCSs) were developed. These systems, such as CVS, 
Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check 
out files from that central place. For many years, this has been the standard for version control.
Figure 1-2.
Centralized version control
This setup offers many advantages, especially over local VCSs. For example, everyone knows to a certain degree 
what everyone else on the project is doing. Administrators have fine-grained control over who can do what; and it’s far 
easier to administer a CVCS than it is to deal with local databases on every client.
However, this setup also has some serious downsides. The most obvious is the single point of failure that the 
centralized server represents. If that server goes down for an hour, then during that hour nobody can collaborate 
at all or save versioned changes to anything they’re working on. If the hard disk the central database is on becomes 
corrupted, and proper backups haven’t been kept, you lose absolutely everything—the entire history of the project 
except whatever single snapshots people happen to have on their local machines. Local VCS systems suffer from this 
same problem—whenever you have the entire history of the project in a single place, you risk losing everything.
Chapter 1 
■
 GettinG Started 
4
Distributed Version Control Systems
This is where Distributed Version Control Systems (DVCSs) step in. In a DVCS (such as Git, Mercurial, Bazaar, or 
Darcs), clients don’t just check out the latest snapshot of the files—they fully mirror the repository. Thus if any server 
dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to 
restore it. Every checkout is really a full backup of all the data.
Figure 1-3.
Distributed version control
Furthermore, many of these systems deal pretty well with having several remote repositories they can work 
with, so you can collaborate with different groups of people in different ways simultaneously within the same 
project. This allows you to set up several types of workflows that aren’t possible in centralized systems, such as 
hierarchical models.
Chapter 1 
■
 GettinG Started 
5
A Short History of Git
As with many great things in life, Git began with a bit of creative destruction and fiery controversy.
The Linux kernel is an open source software project of fairly large scope. For most of the lifetime of the Linux 
kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files. In 2002, 
the Linux kernel project began using a proprietary DVCS called BitKeeper.
In 2005, the relationship between the community that developed the Linux kernel and the commercial company 
that developed BitKeeper broke down, and the tool’s free-of-charge status was revoked. This prompted the Linux 
development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on 
some of the lessons they learned while using BitKeeper. Some of the goals of the new system were as follows:
Speed
• 
Simple design
• 
Strong support for non-linear development (thousands of parallel branches)
• 
Fully distributed
• 
Able to handle large projects like the Linux kernel efficiently (speed and data size)
• 
Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. 
It’s incredibly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear 
development (see Chapter 3).
Git Basics
So, what is Git in a nutshell? This is an important section to absorb, because if you understand what Git is and the 
fundamentals of how it works, then using Git effectively will probably be much easier for you. As you learn Git, try to 
clear your mind of the things you may know about other VCSs, such as Subversion and Perforce; doing so will help 
you avoid subtle confusion when using the tool. Git stores and thinks about information much differently than these 
other systems, even though the user interface is fairly similar, and understanding those differences will help prevent 
you from becoming confused while using it.
Chapter 1 
■
 GettinG Started 
6
Snapshots, Not Differences
The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about 
its data. Conceptually, most other systems store information as a list of file-based changes. These systems (CVS, 
Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to 
each file over time.
Figure 1-4.
Storing data as changes to a base version of each file
Git doesn’t think of or store its data this way. Instead, Git thinks of its data more like a set of snapshots of a 
miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what 
all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, 
Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data 
more like a 
stream of snapshots
.
Figure 1-5.
Storing data as snapshots of the project over time
Chapter 1 
■
 GettinG Started 
7
This is an important distinction between Git and nearly all other VCSs. It makes Git reconsider almost every 
aspect of version control that most other systems copied from the previous generation. This makes Git more like a 
mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS. We’ll explore some of 
the benefits you gain by thinking of your data this way when we cover Git branching in Chapter 3.
Nearly Every Operation Is Local
Most operations in Git only need local files and resources to operate—generally no information is needed from another 
computer on your network. If you’re used to a CVCS where most operations have that network latency overhead, this 
aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers. Because you have the 
entire history of the project right there on your local disk, most operations seem almost instantaneous.
For example, to browse the history of the project, Git doesn’t need to go out to the server to get the history and 
display it for you—it simply reads it directly from your local database. This means you see the project history almost 
instantly. If you want to see the changes introduced between the current version of a file and the file a month ago, Git 
can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server 
to do it or pull an older version of the file from the remote server to do it locally.
This also means that there is very little you can’t do if you’re offline or off VPN. If you get on an airplane or a 
train and want to do a little work, you can commit happily until you get to a network connection to upload. If you go 
home and can’t get your VPN client working properly, you can still work. In many other systems, doing so is either 
impossible or painful. In Perforce, for example, you can’t do much when you aren’t connected to the server; and in 
Subversion and CVS, you can edit files, but you can’t commit changes to your database (because your database is 
offline). This may not seem like a huge deal, but you may be surprised what a big difference it can make.
Git Has Integrity
Everything in Git is check-summed before it is stored and is then referred to by that checksum. This means it’s 
impossible to change the contents of any file or directory without Git knowing about it. This functionality is built in 
to Git at the lowest levels and is integral to its philosophy. You can’t lose information in transit or get file corruption 
without Git being able to detect it.
The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string 
composed of hexadecimal characters (0–9 and a–f ) and calculated based on the contents of a file or directory 
structure in Git. A SHA-1 hash looks something like this:
24b9da6552252987aa493b52f8696cd6d3b00373
You will see these hash values all over the place in Git because it uses them so much. In fact, Git stores everything 
in its database not by filename but by the hash value of its contents.
Git Generally Only Adds Data
When you do actions in Git, nearly all of them only add data to the Git database. It is hard to get the system to do 
anything that is not undoable or to make it erase data in any way. As in any VCS, you can lose or mess up changes you 
haven’t committed yet; but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly 
push your database to another repository.
This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
Chapter 1 
■
 GettinG Started 
8
The Three States
Now, pay attention. This is the main thing to remember about Git if you want the rest of your learning process to go 
smoothly. Git has three main states that your files can reside in: committed, modified, and staged. 
Committed
 means 
that the data is safely stored in your local database. 
Modified
 means that you have changed the file but have not 
committed it to your database yet. 
Staged
 means that you have marked a modified file in its current version to go into 
your next commit snapshot.
This leads us to the three main sections of a Git project: the Git directory, the working directory, and the 
staging area.
Figure 1-6.
Working directory, staging area, and Git directory
The Git directory is where Git stores the metadata and object database for your project. This is the most 
important part of Git, and it is what is copied when you clone a repository from another computer.
The working directory is a single checkout of one version of the project. These files are pulled out of the 
compressed database in the Git directory and placed on disk for you to use or modify.
The staging area is a file, generally contained in your Git directory, that stores information about what will go into 
your next commit. It’s sometimes referred to as the “index”, but it’s also common to refer to it as the staging area.
The basic Git workflow goes something like this:
1. 
You modify files in your working directory.
2. 
You stage the files, adding snapshots of them to your staging area.
3. 
You do a commit, which takes the files as they are in the staging area and stores that 
snapshot permanently to your Git directory.
If a particular version of a file is in the Git directory, it’s considered committed. If it’s modified but has been 
added to the staging area, it is staged. And if it was changed since it was checked out but has not been staged, it is 
modified. In Chapter 2, you’ll learn more about these states and how you can either take advantage of them or skip the 
staged part entirely.

